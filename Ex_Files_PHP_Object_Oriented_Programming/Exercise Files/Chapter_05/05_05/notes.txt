class Bicycle {
    protected static $wheels = 2;

    public static function wheel_details() {
        $wheel_string = self::$wheels == 1 ? "1 wheel" : self:: $wheels ." wheels";
        return "It has " . $wheel_string . ".";
    }
}    

class Unicycle extends Bicycle {
    protected static $wheels = 1;
}

echo Bicycle::wheel_details();
// It has 2 wheels.
echo Unicycle::wheel_details();
// It has 2 wheels. (inherited behaviors from bicycle but also overrode the default values of wheels, this is because of static bindings)

Static bindings
- Static references are resolved using the class in which the method was defined
- self is defined in Bicycle so it references Bicycle
- Allows PHP to preprocess class definitions
- Prevents inheriting static references


Late Static Bindings
- Late static bindings are resolved using the class that is called at runtime
- Added in PHP 5.3
- Replace keyword self with static
- Same concept as static references but allows inheritance

class Bicycle {
    protected static $wheels = 2;

    public static function wheel_details() {
        $wheel_string = static::$wheels == 1 ? "1 wheel" : static:: $wheels ." wheels";
        return "It has " . $wheel_string . ".";
    }
}    

class Unicycle extends Bicycle {
    protected static $wheels = 1;
}

echo Bicycle::wheel_details();
// It has 2 wheels.
echo Unicycle::wheel_details();
// It has 1 wheel.

Late Static Bindings
- get_class($object) (when you pass it an object as an argument, it tells us what class that object is)(another way to use t is to put no object in at all, and when it's inside our code, it'll tell us what the current class is)
- get_called_class() (won't take any arguments, but once it's inside a method, it'll return the late static binding class, the class at runtime.)

